version: 1.0.{build}
pull_requests:
  do_not_increment_build_number: true

environment:
  MYSQL_HOST: localhost
  MYSQL_USER: root
  MYSQL_PASSWORD: Password12!
  PGUSER: postgres
  PGPASSWORD: Password12!
  MYSQL_PATH: C:\Program Files\MySQL\MySQL Server 5.7
  PGSQL_PATH: C:\Program Files\PostgreSQL\9.6
  POSTGRES_ENV_POSTGRES_USER: postgres
  POSTGRES_ENV_POSTGRES_PASSWORD: Password12!
  MYSQL_ENV_MYSQL_USER: root
  MYSQL_ENV_MYSQL_PASSWORD: Password12!
  BROKER_URL: redis://127.0.0.1:6379/0
  BACKEND_URL: redis://127.0.0.1:6379/0

  matrix:
    - PYTHON: C:\Python27-x64
      MSVC_VERSION: "Visual Studio 10 Win64"
    - PYTHON: C:\Python36-x64
      MSVC_VERSION: "Visual Studio 10 Win64"

services:
  - mysql
  - postgresql

before_test:
  - SET PATH=%MYSQL_PATH%\bin;%PGSQL_PATH%\bin;%PATH%
  - mysqladmin --host=%MYSQL_HOST% --user=%MYSQL_USER% --password=%MYSQL_PASSWORD% create pacifica_ingest
  - mysqladmin --host=%MYSQL_HOST% --user=%MYSQL_USER% --password=%MYSQL_PASSWORD% create pacifica_uniqueid
  - createdb pacifica_metadata
  - ps: >
      $env:PATH = "${env:PGSQL_PATH}\bin;${env:MYSQL_PATH}\bin;${env:PYTHON}\Scripts;${env:PATH}";
      mkdir C:\ingest;
      mkdir C:\tmp;
      mkdir C:\archive;
      Start-Process $env:PYTHON\python.exe -ArgumentList "$env:PYTHON\scripts\UniqueIDServer.py" -WorkingDirectory "travis\uniqueid";
      Start-Process $env:PYTHON\python.exe -ArgumentList "$env:PYTHON\scripts\MetadataServer.py" -WorkingDirectory "travis\metadata";
      Invoke-WebRequest https://github.com/pacifica/pacifica-metadata/archive/master.zip -OutFile pacifica-metadata.zip;
      Expand-Archive pacifica-metadata.zip -DestinationPath C:\pacifica-metadata;
      nuget install redis-64 -excludeversion;
      redis-64\tools\redis-server.exe --service-install;
      redis-64\tools\redis-server.exe --service-start;
      Invoke-WebRequest http://localhost:8121/users;
      cd C:\pacifica-metadata\pacifica-metadata-master;
      & "$env:PYTHON\python.exe" -m test_files.loadit;
      cd C:\projects\pacifica-ingest\test_data;
      cp metadata-files/good-md.json metadata.txt;
      tar -cf good.tar metadata.txt data;
      cp metadata-files/bad-proposal-md.json metadata.txt;
      tar -cf bad-proposal.tar metadata.txt data;
      cp metadata-files/bad-mimetype-md.json metadata.txt;
      tar -cf bad-mimetype.tar metadata.txt data;
      cp metadata-files/bad-hashsum-md.json metadata.txt;
      tar -cf bad-hashsum.tar metadata.txt data;
      cp metadata-files/bad-json-md.notjson metadata.txt;
      tar -cf bad-json.tar metadata.txt data;
      cd ..;
      ls test_data;

install:
  - ps: >
      $env:PATH = "${env:PGSQL_PATH}\bin;${env:MYSQL_PATH}\bin;${env:PYTHON}\Scripts;${env:PATH}";
      Invoke-WebRequest -OutFile sqlite.zip https://www.sqlite.org/2018/sqlite-dll-win64-x64-3240000.zip;
      Invoke-WebRequest -OutFile sqlite-devel.zip https://www.sqlite.org/2018/sqlite-amalgamation-3240000.zip;
      Expand-Archive sqlite.zip -DestinationPath sqlite3;
      Expand-Archive sqlite-devel.zip -DestinationPath sqlite3;
      cd sqlite3;
      & "C:\Users\appveyor\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0\VC\Bin\amd64\link.exe" /lib /def:sqlite3.def;
      cd ..;
      cp sqlite3\sqlite3.dll "$env:PYTHON\DLLs\sqlite3.dll";
      cp sqlite3\sqlite3.lib "$env:PYTHON\libs\sqlite3.lib";
      cp sqlite3\sqlite-amalgamation-3240000\sqlite3.h "$env:PYTHON\include\sqlite3.h";
      cp "c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\stdint.h" "C:\Users\appveyor\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0\VC\include\stdint.h";
      Invoke-WebRequest -Uri "https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.5.zip" -OutFile "elasticsearch.zip";
      Expand-Archive "elasticsearch.zip" -DestinationPath "C:\elasticsearch";
      Start-Process C:\elasticsearch\elasticsearch-5.6.5\bin\elasticsearch;
      & "$env:PYTHON\python.exe" -m pip install pip setuptools wheel --upgrade;
      & "$env:PYTHON\python.exe" -m pip install -r requirements-dev.txt;
      & "$env:PYTHON\python.exe" -m pip install celery[redis] eventlet;

build: off

test_script:
  - ps: >
      $env:PATH = "${env:PGSQL_PATH}\bin;${env:MYSQL_PATH}\bin;${env:PYTHON}\Scripts;${env:PATH}";
      function error_and_dump([Boolean]$test_rc) {
        if( ! $test_rc ) {
          echo "================ Server Error ================";
          cat server-error.log;
          echo "================ Celery Error ================";
          cat celery-error.log;
          echo "================ Archive Error ================";
          cat archive-error.log;
          echo "================ Policy Error ================";
          cat policy-error.log;
          echo "================ Server Output ================";
          cat server-output.log;
          echo "================ Celery Output ================";
          cat celery-output.log;
          echo "================ Archive Output ================";
          cat archive-output.log;
          echo "================ Policy Output ================";
          cat policy-output.log;
          echo "================ End Logs ================";
          exit $test_rc;
        }
      }
      echo "============= Starting ArchiveInterface =============";
      $arch_proc = Start-Process $env:PYTHON\python.exe -WorkingDirectory "travis\archivei" -ArgumentList "$env:PYTHON\scripts\ArchiveInterfaceServer.py --prefix C:\archive" -PassThru -RedirectStandardError archive-error.log -RedirectStandardOutput archive-output.log;
      echo "============= Starting Policy =============";
      $policy_proc = Start-Process $env:PYTHON\python.exe -ArgumentList "$env:PYTHON\scripts\PolicyServer.py" -WorkingDirectory "travis\policy" -PassThru -RedirectStandardError policy-error.log -RedirectStandardOutput policy-output.log;
      echo "============= Starting Cart Backend =============";
      $back_proc = Start-Process $env:PYTHON\python.exe -ArgumentList "-m coverage run --include=ingest* -p -m celery -A ingest.backend worker -l info -c 1 -P solo" -PassThru -RedirectStandardError celery-error.log -RedirectStandardOutput celery-output.log;
      echo "============= Starting Cart Frontend =============";
      $front_proc = Start-Process $env:PYTHON\python.exe -ArgumentList "-m coverage run --include=ingest* -p IngestServer.py --stop-after-a-moment" -PassThru -RedirectStandardError server-error.log -RedirectStandardOutput server-output.log;
      echo foo > C:\tmp\foo.txt;
      & "$env:PYTHON\python.exe" -m coverage run --include=ingest* -p -m pytest -v ingest/test/test_ingest.py ingest/test/test_upload.py ingest/test/test_utils.py ingest/test/test_move.py;
      error_and_dump $?;
      $policy_proc.Kill();
      $policy_proc | Wait-Process;
      & "$env:PYTHON\python.exe" -m coverage run --include=ingest* -p -m pytest -v ingest/test/test_upload_badpolicy.py;
      error_and_dump $?;
      $policy_proc = Start-Process $env:PYTHON\python.exe -ArgumentList "$env:PYTHON\scripts\PolicyServer.py" -WorkingDirectory "travis\policy" -PassThru -RedirectStandardError policy-error.log -RedirectStandardOutput policy-output.log;
      $arch_proc.Kill();
      $arch_proc | Wait-Process;
      & "$env:PYTHON\python.exe" -m coverage run --include=ingest* -p -m pytest -v ingest/test/test_upload_badai.py;
      error_and_dump $?;
      $front_proc | Wait-Process;
      & "$env:PYTHON\python.exe" -m coverage run --include=ingest* -p -m ingest --stop-after-a-moment;
      $policy_proc.Kill();
      echo "Asking Celery to Shutdown";
      & "$env:PYTHON\python.exe" -m celery -A ingest.backend control shutdown;
      $back_proc | Wait-Process;
      & "$env:PYTHON\python.exe" -m coverage run --include=ingest* -p -m pytest -v ingest/test/test_entry_points.py;
      ls .coverage* | %{ & "$env:PYTHON\python.exe" -m coverage combine -a $_.name };
      & "$env:PYTHON\python.exe" -m coverage report -m --fail-under=100;
